package rmi.view;

// Generated by GuiGenie - Copyright (c) 2004 Mario Awad.
// Home Page http://guigenie.cjb.net - Check often for new versions!
import java.awt.Dimension;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.SwingUtilities;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

import rmi.model.ChatClient;
import rmi.model.Message;

public class View extends JPanel {
	/**
	 * 
	 */
	private static final long	serialVersionUID	= 7698952923427898502L;
	public static JTextPane		scrollPane;
	public static JScrollPane	sp;
	public JTextField	jcomp1;
	public JButton						send;
	public JMenuBar						jcomp3;
	public JPanel							msgs;
	private static ChatClient	CLIENT						= null;
	private View							view							= this;
	
	public View() {
		
		// construct preComponents
		JMenu fileMenu = new JMenu("File");
		JMenuItem exitItem = new JMenuItem("Exit");
		exitItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e) {
				System.exit(0);
			}
		});
		fileMenu.add(exitItem);
		JMenu chatMenu = new JMenu("Chat");
		JMenuItem connectItem = new JMenuItem("Connect");
		
		chatMenu.add(connectItem);
		JMenuItem disconnectItem = new JMenuItem("Disconnect");
		
		chatMenu.add(disconnectItem);
		JMenu helpMenu = new JMenu("Help");
		JMenuItem aboutItem = new JMenuItem("About");
		aboutItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e) {
			}
		});
		helpMenu.add(aboutItem);
		JMenuItem versionItem = new JMenuItem("Version");
		versionItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e) {
			}
		});
		helpMenu.add(versionItem);
		// construct components
		jcomp1 = new JTextField(5);
		send = new JButton("SEND");
		jcomp3 = new JMenuBar();
		jcomp3.add(fileMenu);
		jcomp3.add(chatMenu);
		jcomp3.add(helpMenu);
		// set components properties
		jcomp1.setToolTipText("Schreib deine Nachricht :)");
		send.setToolTipText("Die Nachricht senden");
		// JPanel
		msgs = new JPanel();
		// Jscrollpane f√ºr Messages
		scrollPane = new JTextPane();
		scrollPane.setEditable(false);
		
		// make scrollPane scrollable
		sp = new JScrollPane(scrollPane);
		sp.getVerticalScrollBar().addAdjustmentListener(new AdjustmentListener() {
			@Override
			public void adjustmentValueChanged(AdjustmentEvent e) {
				e.getAdjustable().setValue(e.getAdjustable().getMaximum());
			}
		});
		// adjust size and set layout
		setPreferredSize(new Dimension(370, 410));
		setLayout(null);
		
		// Allow to send with enter
		jcomp1.addKeyListener(new KeyListener() {
			public void keyPressed(KeyEvent e) {
				if (e.getKeyCode() == KeyEvent.VK_ENTER) {
					e.consume();
					try {
						CLIENT.getInstance().send(
								new Message("[" + CLIENT.getInstance().getMsgname() + "] ",
										jcomp1.getText() + "\n"));
						jcomp1.setText("");
					} catch (RemoteException e1) {
						// TODO Auto-generated catch block
						JOptionPane.showMessageDialog(view,
								"[System] Nachricht konnte nicht gesendet werden!", "Fehler",
								JOptionPane.ERROR_MESSAGE);
						e1.printStackTrace();
					}
				}
			}
			
			@Override
			public void keyTyped(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void keyReleased(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}
		});
		
		// Action Listener send button
		send.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e) {
				try {
					CLIENT.getInstance().send(
							new Message("[" + CLIENT.getInstance().getMsgname() + "] ",
									jcomp1.getText() + "\n"));
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					JOptionPane.showMessageDialog(view,
							"[System] Nachricht konnte nicht gesendet werden!", "Fehler",
							JOptionPane.ERROR_MESSAGE);
					e1.printStackTrace();
				}
			}
		});
		
		connectItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e) {
				
			}
		});
		
		disconnectItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e) {
				
			}
		});
		
		// add components
		add(jcomp1);
		add(sp);
		add(send);
		add(jcomp3);
		// set component bounds (only needed by Absolute Positioning)
		sp.setBounds(10, 45, 360, 325);
		jcomp1.setBounds(10, 380, 260, 25);
		send.setBounds(275, 380, 95, 25);
		jcomp3.setBounds(0, 0, 385, 30);
		
		Thread thread = new Thread(new Receiver());
		thread.run();
		
	}
	
	public static void append(String s) {
		try {
			Document doc = scrollPane.getDocument();
			doc.insertString(doc.getLength(), s, null);
		} catch (BadLocationException exc) {
			exc.printStackTrace();
		}
	}
	
	public class Receiver extends Thread {
		public void run() {
			while (true) {
				scrollPane.removeAll();
				List<Message> messages = new ArrayList<Message>();
				try {
					messages = CLIENT.getInstance().getServer().returnMessages();
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (MalformedURLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (NotBoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				for (Message i : messages) {
					append(i.getName() + i.getMsg());
					try {
						CLIENT.getInstance().getServer().rmvPrintedMsgs();
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (MalformedURLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (NotBoundException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				scrollPane.repaint();
				try {
					Thread.sleep(20);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}
}
