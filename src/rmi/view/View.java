
package rmi.view;

// Generated by GuiGenie - Copyright (c) 2004 Mario Awad.
// Home Page http://guigenie.cjb.net - Check often for new versions!
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.ConnectException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;

import javax.swing.*;
import javax.swing.event.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

import rmi.model.ChatClient;

public class View extends JPanel {
	public static JTextPane scrollPane;
	public static JTextField jcomp1;
	public JButton send;
	public JMenuBar jcomp3;
	public JPanel msgs;
	private static ChatClient CLIENT = null;
	private View view = this;

	public View() {
		
		// construct preComponents
		JMenu fileMenu = new JMenu("File");
		JMenuItem exitItem = new JMenuItem("Exit");
		exitItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e) {
				System.exit(0);
			}
		});
		fileMenu.add(exitItem);
		JMenu chatMenu = new JMenu("Chat");
		JMenuItem connectItem = new JMenuItem("Connect");

		chatMenu.add(connectItem);
		JMenuItem disconnectItem = new JMenuItem("Disconnect");
		
		chatMenu.add(disconnectItem);
		JMenu helpMenu = new JMenu("Help");
		JMenuItem aboutItem = new JMenuItem("About");
		aboutItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e) {
			}
		});
		helpMenu.add(aboutItem);
		JMenuItem versionItem = new JMenuItem("Version");
		versionItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e) {
			}
		});
		helpMenu.add(versionItem);
		// construct components
		jcomp1 = new JTextField(5);
		send = new JButton("SEND");
		jcomp3 = new JMenuBar();
		jcomp3.add(fileMenu);
		jcomp3.add(chatMenu);
		jcomp3.add(helpMenu);
		// set components properties
		jcomp1.setToolTipText("Schreib deine Nachricht :)");	
		send.setToolTipText("Die Nachricht senden");
		// JPanel
		msgs = new JPanel();
	// Jscrollpane f√ºr Messages
				  scrollPane = new JTextPane();
				  scrollPane.setEditable(false);
		// adjust size and set layout
		setPreferredSize(new Dimension(370, 410));
		setLayout(null);
		// Action Listener send button
		send.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e) {
				try {
					CLIENT.getInstance().send(jcomp1.getText());
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					JOptionPane.showMessageDialog(view, "[System] Nachricht konnte nicht gesendet werden!", "Fehler", JOptionPane.ERROR_MESSAGE);
					e1.printStackTrace();
				}
			}
		});
		
		connectItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e) {
			}
		});
		
		disconnectItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e) {
				
			}
		});
		
		// add components
		add(jcomp1);
		add(scrollPane);
		add(send);
		add(jcomp3);
		// set component bounds (only needed by Absolute Positioning)
		scrollPane.setBounds(10, 45, 360, 325);
		jcomp1.setBounds(10, 380, 260, 25);
		send.setBounds(275, 380, 95, 25);
		jcomp3.setBounds(0, 0, 385, 30);
	}
	
	public static void main(String[] args) {
		try {
			ChatClient peter = CLIENT.getInstance();
			peter.send(jcomp1.getText());
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static void append(String s) {
	   try {
	      Document doc = scrollPane.getDocument();
	      doc.insertString(doc.getLength(), s, null);
	   } catch(BadLocationException exc) {
	      exc.printStackTrace();
	   }
	}
}
